{
  "version": 3,
  "file": "../dist/purecounter_vanilla.js",
  "mappings": "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",
  "sources": [
    "webpack://PureCounter/webpack/universalModuleDefinition",
    "webpack://PureCounter/./js/purecounter_vanilla.js",
    "webpack://PureCounter/webpack/bootstrap",
    "webpack://PureCounter/webpack/startup"
  ],
  "sourcesContent": [
    "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PureCounter\"] = factory();\n\telse\n\t\troot[\"PureCounter\"] = factory();\n})(self, function() {\nreturn ",
    "/** This function is for create and merge configuration */\r\nfunction setOptions(config, baseConfig = {}){\r\n    // Create new Config object;\r\n    var newConfig = {};\r\n\r\n    // Loop config items to set it value into newConfig\r\n    for(var key in config){\r\n        // if baseConfig is set, only accept the baseconfig property\r\n        if(baseConfig != {} && !baseConfig.hasOwnProperty(key)) continue;\r\n        // parse the config value\r\n        var val = parseValue(config[key]);\r\n        // set the newConfig property value\r\n        newConfig[key] = val;\r\n        // Exclusive for 'duration' or 'pulse' property, recheck the value\r\n        // If it's not a boolean, just set it to milisecond unit\r\n        if (key.match(/duration|pulse/)){\r\n            newConfig[key] = typeof val != 'boolean' ? val * 1000 : val;\r\n        }\r\n    }\r\n\r\n    // Finally, we can just merge the baseConfig (if any), with newConfig.\r\n    return Object.assign({}, baseConfig, newConfig);\r\n}\r\n\r\n/** This is the the counter method */\r\nfunction startCounter(element, config) {\r\n    // First, get the increments step\r\n    var incrementsPerStep = (config.end - config.start) / (config.duration / config.delay);\r\n    // Next, set the counter mode (Increment or Decrement)\r\n    var countMode = 'inc';\r\n\r\n    // Set mode to 'decrement' and 'increment step' to minus if start is larger than end\r\n    if (config.start > config.end) {\r\n        countMode = 'dec';\r\n        incrementsPerStep *= -1;\r\n    }\r\n\r\n    // Next, determine the starting value\r\n    var currentCount = parseValue(config.start);\r\n    // And then print it's value to the page\r\n    element.innerHTML = formatNumber(currentCount, config);\r\n\r\n    // If the config 'once' is true, then set the 'duration' to 0\r\n    if(config.once === true){\r\n        element.setAttribute('data-purecounter-duration', 0);\r\n    }\r\n\r\n    // Now, start counting with counterWorker using Interval method based on delay\r\n    var counterWorker = setInterval(() => {\r\n        // First, determine the next value base on current value, increment value, and count mode\r\n        var nextNum = nextNumber(currentCount, incrementsPerStep, countMode);\r\n        // Next, print that value to the page\r\n        element.innerHTML = formatNumber(nextNum, config);\r\n        // Now set that value to the current value, because it's already printed\r\n        currentCount = nextNum;\r\n\r\n        // If the value is larger or less than the 'end' (base on mode), then  print the end value and stop the Interval\r\n        if ((currentCount >= config.end && countMode == 'inc') || (currentCount <= config.end && countMode == 'dec')) {\r\n            element.innerHTML = formatNumber(config.end, config);\r\n            // If 'once' is false and 'pulse' is set\r\n            if(! config.once && config.pulse){\r\n                // First set the 'duration' to zero\r\n                element.setAttribute('data-purecounter-duration', 0);\r\n                // Next, use timeout to reset it duration back based on 'pulse' config\r\n                setTimeout(() => {\r\n                    element.setAttribute('data-purecounter-duration', (config.duration / 1000));\r\n                }, config.pulse);\r\n            }\r\n            clearInterval(counterWorker);\r\n        }\r\n    }, config.delay);\r\n}\r\n\r\n/** This function is to get the next number */\r\nfunction nextNumber(number, steps, mode = 'inc') {\r\n    // First, get the exact value from the number and step (int or float)\r\n    number = parseValue(number);\r\n    steps = parseValue(steps);\r\n\r\n    // Last, get the next number based on current number, increment step, and count mode\r\n    // Always return it as float\r\n    return parseFloat(mode === 'inc' ? (number + steps) : (number - steps));\r\n}\r\n\r\n/** This function is to convert number into currency format */\r\nfunction convertNumber (number, config) {\r\n    /** Use converter if filesizing or currency is on */\r\n    if (config.filesizing || config.currency) {\r\n        number = Math.abs(Number(number)); // Get the absolute value of number\r\n\r\n        var baseNumber = 1000, // Base multiplying treshold\r\n            symbol = config.currency && typeof config.currency === 'string' ? config.currency : \"\", // Set the Currency Symbol (if any)\r\n            limit = config.decimals || 1, // Set the decimal limit (default is 1)\r\n            unit = ['', 'K', 'M', 'B', 'T'], // Number unit based exponent threshold\r\n            value = ''; // Define value variable\r\n\r\n        /** Changes base number and its unit for filesizing */\r\n        if (config.filesizing) {\r\n            baseNumber = 1024; // Use 1024 instead of 1000\r\n            unit = ['bytes', 'KB', 'MB', 'GB', 'TB']; // Change to 'bytes' unit\r\n        }\t\t\r\n\r\n        /** Set value based on the threshold */\r\n        for(var i = 4; i >= 0; i--){\r\n            // If the exponent is 0\r\n            if(i === 0) value = `${number.toFixed(limit)} ${unit[i]}`;\r\n            // If the exponent is above zero\r\n            if(number >= getFilesizeThreshold(baseNumber, i)) {\r\n                value = `${(number / getFilesizeThreshold(baseNumber, i)).toFixed(limit)} ${unit[i]}`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Apply symbol before the value and return it as string\r\n        return symbol + value;\r\n    } else {\r\n        /** Return its value as float if not using filesizing or currency*/\r\n        return parseFloat(number);\r\n    }\r\n}\r\n\r\n/** This function will get the given base.  */\r\nfunction getFilesizeThreshold(baseNumber, index) {\r\n    return Math.pow(baseNumber, index);\r\n}\r\n\r\n/** This function is to get the last formated number */\r\nfunction applySeparator(value, config){\r\n    // If config separator is false, delete all separator\r\n    if (! config.separator) {\r\n        return value.replace(new RegExp(/,/gi, 'gi'), '')\r\n    }\r\n    // Set the separator symbol.\r\n    // If 'separator' is string, than use the separator.\r\n    // If 'separator' is boolean value for 'true', just set it default to comma (,)\r\n    var symbol = typeof config.separator === 'string' ? config.separator : ',';\r\n    // If config separator is true, then create separator\r\n    return value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\r\n        .replace(new RegExp(/,/gi, 'gi'), symbol);\r\n}\r\n\r\n/** This function is to get formated number to be printed in the page */\r\nfunction formatNumber(number, config) {\r\n    // This is the configuration for 'toLocaleString' method\r\n    var strConfig = {minimumFractionDigits: config.decimals, maximumFractionDigits: config.decimals};\r\n\r\n    // Set and convert the number base on its config.\r\n    number = convertNumber(number, config);\r\n\r\n    // Last, apply the number separator using number as string\r\n    return applySeparator(number.toLocaleString(undefined, strConfig), config);\r\n}\r\n\r\n/** This function is to get the parsed value */\r\nfunction parseValue(data) {\r\n    // If number with dot (.), will be parsed as float\r\n    if (/^[0-9]+\\.[0-9]+$/.test(data)) {\r\n        return parseFloat(data);\r\n    }\r\n    // If just number, will be parsed as integer\r\n    if (/^[0-9]+$/.test(data)) {\r\n        return parseInt(data);\r\n    }\r\n    // If it's boolean string, will be parsed as boolean\r\n    if (/^true|false/i.test(data)) {\r\n        return /^true/i.test(data);\r\n    }\r\n    // Return it's value as default\r\n    return data;\r\n}\r\n\r\n// This function is to detect the element is in view or not.\r\nfunction elementIsInView(element) {\r\n    var top = element.offsetTop;\r\n    var left = element.offsetLeft;\r\n    var width = element.offsetWidth;\r\n    var height = element.offsetHeight;\r\n\r\n    while (element.offsetParent) {\r\n        element = element.offsetParent;\r\n        top += element.offsetTop;\r\n        left += element.offsetLeft;\r\n    }\r\n\r\n    return (\r\n        top >= window.pageYOffset &&\r\n        left >= window.pageXOffset &&\r\n        (top + height) <= (window.pageYOffset + window.innerHeight) &&\r\n        (left + width) <= (window.pageXOffset + window.innerWidth)\r\n    );\r\n}\r\n\r\n/** Just some condition to check browser Intersection Support */\r\nfunction intersectionListenerSupported() {\r\n    return ('IntersectionObserver' in window) &&\r\n        ('IntersectionObserverEntry' in window) &&\r\n        ('intersectionRatio' in window.IntersectionObserverEntry.prototype);\r\n}\r\n\r\n/** Initialize PureCounter */\r\nfunction PureCounter(options = {}){\r\n    var configs = {\r\n        start: 0, \t\t\t// Starting number [unit]\r\n        end: 100, \t\t\t// End number [unit]\r\n        duration: 2000, \t// Count duration [milisecond]\r\n        delay: 10, \t\t\t// Count delay [milisecond]\r\n        once: true, \t\t// Counting at once or recount when scroll [boolean]\r\n        pulse: false, \t\t// Pulse count for certain time [boolean|milisecond]\r\n        decimals: 0, \t\t// Decimal places [unit]\r\n        legacy: true,       // If this is true it will use the scroll event listener on browsers\r\n        filesizing: false, \t// Is it for filesize?\r\n        currency: false, \t// Is it for currency? Use it for set the symbol too [boolean|char|string]\r\n        separator: false, \t// Do you want to use thausands separator? use it for set the symbol too [boolean|char|string]\r\n        selector: '.purecounter',       // HTML query selector for spesific element\r\n    };\r\n    var configOptions = setOptions(options, configs);\r\n\r\n    function registerEventListeners() {\r\n\t\t/** Get all elements with class 'purecounter' */\r\n\t\tvar elements = document.querySelectorAll(configOptions.selector);\r\n\t\t/** Return if no elements */\r\n\t\tif (elements.length === 0) {\r\n            return;\r\n        }\r\n\r\n\t\t/** Run animateElements base on Intersection Support */\r\n\t\tif (intersectionListenerSupported()) {\r\n\t\t\tvar intersectObserver = new IntersectionObserver(animateElements.bind(this), {\r\n\t\t\t\t\"root\": null,\r\n\t\t\t\t\"rootMargin\": '20px',\r\n\t\t\t\t\"threshold\": 0.5\r\n\t\t\t});\r\n\r\n\t\t\telements.forEach(element => {intersectObserver.observe(element);})\r\n\t\t} else {\r\n\t\t\tif (window.addEventListener) {\r\n\t\t\t\tanimateLegacy(elements);\r\n\t\t\t\twindow.addEventListener('scroll', function (e) {\r\n\t\t\t\t\tanimateLegacy(elements);\r\n\t\t\t\t}, { \"passive\": true });\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    /** This legacy to make Purecounter use very lightweight & fast */\r\n    function animateLegacy(elements) {\r\n        elements.forEach(element => {\r\n            var config = parseConfig(element);\r\n            if(config.legacy === true && elementIsInView(element)) {\r\n                animateElements([element]);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Main Element Count Animation */\r\n    function animateElements(elements, observer) {\r\n        elements.forEach(element => {\r\n            var elm = element.target || element; // Just make sure which element will be used\r\n            var elementConfig = parseConfig(elm); // Get config value on that element\r\n\r\n            // If duration is less than or equal zero, just format the 'end' value\r\n            if (elementConfig.duration <= 0) {\r\n                return elm.innerHTML = formatNumber(elementConfig.end, elementConfig);\r\n            }\r\n\r\n            if ((! observer && ! elementIsInView(element)) || (observer && element.intersectionRatio < 0.5)) {\r\n                var value = elementConfig.start > elementConfig.end ? elementConfig.end : elementConfig.start;\r\n                return elm.innerHTML = formatNumber(value, elementConfig);\r\n            }\r\n\r\n            // If duration is more than 0, then start the counter\r\n            setTimeout(() => {\r\n                return startCounter(elm, elementConfig);\r\n            }, elementConfig.delay);\r\n        });\r\n    }\r\n\r\n    /** This function is to generate the element Config */\r\n    function parseConfig(element) {\r\n\t\t// First, we need to declare the base Config\r\n\t\t// This config will be used if the element doesn't have config\r\n\t\tvar baseConfig = configOptions;\r\n\r\n\t\t// Next, get all 'data-precounter-*' attributes value. Store to array\r\n\t\tvar configValues = [].filter.call(element.attributes, function(attr) {\r\n\t\t\treturn /^data-purecounter-/.test(attr.name);\r\n\t\t});\r\n\r\n\t\t// Now, we create element config as an object\r\n\t\tvar elementConfig = configValues.length != 0 ? Object.assign({}, ...configValues.map(({name, value}) => {\r\n\t\t\tvar key = name.replace('data-purecounter-', '').toLowerCase(),\r\n\t\t\t\tval = parseValue(value);\r\n\r\n\t\t\treturn {[key] : val};\r\n\t\t})) : {};\r\n\r\n\t\t// Last setOptions and return\r\n\t\treturn setOptions(elementConfig, baseConfig);\r\n    }\r\n    \r\n    /** Run the initial function */\r\n    registerEventListeners();\r\n}\r\n\r\nmodule.exports = PureCounter;",
    "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n",
    "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(638);\n"
  ],
  "names": [
    "root",
    "factory",
    "exports",
    "module",
    "define",
    "amd",
    "self",
    "setOptions",
    "config",
    "baseConfig",
    "newConfig",
    "key",
    "hasOwnProperty",
    "val",
    "parseValue",
    "match",
    "Object",
    "assign",
    "startCounter",
    "element",
    "incrementsPerStep",
    "end",
    "start",
    "duration",
    "delay",
    "countMode",
    "currentCount",
    "innerHTML",
    "formatNumber",
    "once",
    "setAttribute",
    "counterWorker",
    "setInterval",
    "nextNum",
    "number",
    "steps",
    "mode",
    "parseFloat",
    "nextNumber",
    "pulse",
    "setTimeout",
    "clearInterval",
    "getFilesizeThreshold",
    "baseNumber",
    "index",
    "Math",
    "pow",
    "strConfig",
    "minimumFractionDigits",
    "decimals",
    "maximumFractionDigits",
    "filesizing",
    "currency",
    "abs",
    "Number",
    "symbol",
    "limit",
    "unit",
    "value",
    "i",
    "toFixed",
    "convertNumber",
    "separator",
    "replace",
    "RegExp",
    "applySeparator",
    "toLocaleString",
    "undefined",
    "data",
    "test",
    "parseInt",
    "elementIsInView",
    "top",
    "offsetTop",
    "left",
    "offsetLeft",
    "width",
    "offsetWidth",
    "height",
    "offsetHeight",
    "offsetParent",
    "window",
    "pageYOffset",
    "pageXOffset",
    "innerHeight",
    "innerWidth",
    "intersectionListenerSupported",
    "IntersectionObserverEntry",
    "prototype",
    "options",
    "configs",
    "legacy",
    "selector",
    "configOptions",
    "registerEventListeners",
    "elements",
    "document",
    "querySelectorAll",
    "length",
    "intersectObserver",
    "IntersectionObserver",
    "animateElements",
    "bind",
    "this",
    "forEach",
    "observe",
    "addEventListener",
    "animateLegacy",
    "e",
    "parseConfig",
    "observer",
    "elm",
    "target",
    "elementConfig",
    "intersectionRatio",
    "configValues",
    "filter",
    "call",
    "attributes",
    "attr",
    "name",
    "map",
    "toLowerCase",
    "__webpack_module_cache__",
    "__webpack_exports__",
    "__webpack_require__",
    "moduleId",
    "cachedModule",
    "__webpack_modules__"
  ],
  "sourceRoot": ""
}
